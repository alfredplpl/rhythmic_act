package oto;

import java.awt.Graphics;
import java.awt.Image;

import keyio.KeyTable;

import action.ActionEvent;

/**
 * 右上に表示される音楽ゲームのインターフェースです。
 * このゲームは、開始時間からの経過時間でゲームを動かします。
 * このインターフェースを実装したインスタンスを生成するときは、
 * OtoFactory.makeOto()を使います。
 * <s>また、draw()のために、このインターフェースを実装する際、
 * Image型のバッファを用意しなければなりません。</s>
 *　drawDirectのGraphicsをつかって直接描画してください。
 * 画像の初期化処理は必要ありません。
 * なお、このゲームでは、表示限界いっぱいにレーン（ノートが落ちてくる部分）
 * を使用せず、
 * 左右に若干(100ピクセル)程度の余裕を持たせてください。。
 * 
 * @version 1.1
 * @author みそかつおでん
 *
 */
public interface Oto {
	/**
	 * 音楽ゲームの表示部分のサイズの一部です。
	 * 横方向のピクセルサイズを表します。
	 */
	public static final int dispX=682;
	
	/**
	 * 音楽ゲームの表示部分のサイズの一部です。
	 * 縦方向のピクセルサイズを表します。
	 */
	public static final int dispY=384;
	
	/**
	 * このメソッドによって、音楽ゲームを１フレーム進めます。
	 * もし、今までに一度も呼び出されていない状態で呼び出された場合、
	 * ゲームの開始を意味します。ただし初期化はコンストラクタで行って
	 * ください。
	 * keytableについてはkeyio.KeyTableを参照してください。
	 * @param keytable　キー入力を受け取ります。
	 */
	public Note[] act(KeyTable keytable);
	
	/**
	 * アクションゲームによって発生させられるイベントをうけとります。
	 * 引数がnullの場合、何も発生しません。
	 * @param event　アクションゲームによって発生させられるイベント
	 */
	public void setEvent(ActionEvent[] event);
	
	/**
	 * 音楽ゲーム中に発生した音楽ゲーム用イベントを渡します。
	 * 何もなかった場合、nullを返します。
	 * @return アクションゲームに発生させるイベント
	 */
	public OtoEvent[] getEvent();
	
	/**
	 * このメソッドは、１フレームの間に生じた得点を返します。
	 * 得点が生じた場合はその得点を、
	 * 特に生じなかった場合は0を返します。
	 * 
	 * @return 直前に処理した音楽ゲームの得点
	 */
	public int getFrameScore();
	
	
	/**
	 * このゲームが続いているかどうかを返します。
	 * このメソッドの戻り値がゲーム全体の終了条件となります。
	 * BMSが終わってからも若干の時間(4小節程度)の余裕を持たせてください。
	 * 
	 * @return このゲームが続いているかどうか
	 */
	public boolean isContinue();
	
	/**
	 * このメソッドによって、直前に処理した音楽ゲームの様子
	 * を表す画像が得られます。
	 * なお、このインターフェースを実装する
	 * クラスは、このメソッドが呼ばれたときに描画を行ってください。
	 * @deprecated drawDirectメソッドによって置き換えてください。この
	 * メソッドは使われません。
	 * @return 直前に処理した音楽ゲームの様子
	 */
	public Image draw();
	
	/**
	 * このメソッドによって、直前に処理した音楽ゲームの様子
	 * を引数のグラフィックコンテキストで描画します。
	 * なお、このインターフェースを実装する
	 * クラスは、このメソッドが呼ばれたときに描画を行ってください。
	 * @param g ゲーム描画領域のグラフィックコンテキスト
	 */
	public void drawDirect(Graphics g);
}
